import carla
from typing import Optional, List, Any, Tuple, Dict

class CarlaDataProvider(object):
    @staticmethod
    def register_actor(actor: carla.Actor) -> carla.Actor: ...
    @staticmethod
    def update_osc_global_params(parameters: Any) -> None: ...
    @staticmethod
    def get_osc_global_param_value(ref: str) -> Optional[Any]: ...
    @staticmethod
    def register_actors(actors: List[carla.Actor]) -> None: ...
    @staticmethod
    def on_carla_tick() -> None: ...
    @staticmethod
    def get_velocity(actor: carla.Actor) -> float: ...
    @staticmethod
    def get_location(actor: carla.Actor) -> Optional[carla.Location]: ...
    @staticmethod
    def get_transform(actor: carla.Actor) -> Optional[carla.Transform]: ...
    @staticmethod
    def set_client(actor: carla.Client) -> None: ...
    @staticmethod
    def get_client() -> carla.Client: ...
    @staticmethod
    def set_world(world: carla.World) -> None: ...
    @staticmethod
    def get_world() -> carla.World: ...
    @staticmethod
    def get_map(world: Optional[carla.World]=None) -> carla.Map: ...
    @staticmethod
    def is_sync_mode() -> bool: ...
    @staticmethod
    def find_weather_presets() -> List[Tuple[Any, str]]: ...
    @staticmethod
    def annotate_trafficlight_in_group(traffic_light: carla.TrafficLight) -> Dict[str, List[Any]]: ...
    @staticmethod
    def get_trafficlight_trigger_location(traffic_light: carla.TrafficLight) -> carla.Location: ...
    @staticmethod
    def update_light_states(ego_light: carla.TrafficLight,
                            annotations: Any,
                            states: List[carla.LightState],
                            freeze: bool=False,
                            timeout: int=1000000000) -> List[Any]: ...
    @staticmethod
    def reset_lights(reset_params: Dict[str, Any]) -> None: ...
    @staticmethod
    def get_next_traffic_light(actor: carla.Actor, use_cached_location: bool=True) -> Optional[carla.TrafficLight]: ...
    @staticmethod
    def set_ego_vehicle_route(route: Any) -> None: ...
    @staticmethod
    def get_ego_vehicle_route() -> Any: ...
    @staticmethod
    def generate_spawn_points() -> None: ...
    @staticmethod
    def create_blueprint(model: str,
                         rolename: str='scenario',
                         color: Optional[str]=None,
                         actor_category: str="car",
                         safe: bool=False) -> carla.ActorBlueprint: ...
    @staticmethod
    def handle_actor_batch(batch: Any, tick: bool=True) -> List[carla.Actor]: ...
    @staticmethod
    def request_new_actor(model: str, 
                          spawn_point: carla.Transform,
                          rolename: str='scenario',
                          autopilot: bool=False,
                          random_location: bool=False,
                          color: Optional[str]=None,
                          actor_category: str="car",
                          safe_blueprint: bool=False,
                          tick: bool=True) -> carla.Actor: ...
    @staticmethod
    def request_new_actors(actor_list: List[Any],
                           safe_blueprint: bool=False,
                           tick: bool=True) -> List[carla.Actor]: ...
    @staticmethod
    def request_new_batch_actors(model: str,
                                 amount: int,
                                 spawn_points: List[carla.Transform],
                                 autopilot: bool=False,
                                 random_location: bool=False,
                                 rolename: str='scenario',
                                 safe_blueprint: bool=False,
                                 tick: bool=True) -> List[carla.Actor]: ...
    @staticmethod
    def get_actors() -> List[carla.Actor]: ...
    @staticmethod
    def actor_id_exists(actor_id: int) -> bool: ...
    @staticmethod
    def get_hero_actor() -> Optional[carla.Actor]: ...
    @staticmethod
    def get_actor_by_id(actor_id: int) -> Optional[carla.Actor]: ...
    @staticmethod
    def remove_actor_by_id(actor_id: int) -> None: ...
    @staticmethod
    def remove_actors_in_surrounding(location: carla.Location, distance: float) -> None: ...
    @staticmethod
    def get_traffic_manager_port() -> int: ...
    @staticmethod
    def set_traffic_manager_port(tm_port: int) -> None: ...
    @staticmethod
    def cleanup() -> None: ...
